sql
--------------
PL/sql
-------------------------
1)function
2)procedures
3)Exception handling
4)cursor
5)join
6)Normalization
7)index
8)Trigger:- It is a stored procedure/program which are automatically executed or fired when some event occur.
we neednot to call a trigger explicitly.
example :- 
1)salary posting on 29th of each month
2)telephone bill generated on the end of a month
3)credit card bill generation
etc.....
Trigger Timing: before,after,instead of
Trigger Event:insert,update,delete
Trigger will effect a single row at a time.

CREATE OR REPLACE TRIGGER t1 
BEFORE INSERT ON mphasisemp 
BEGIN
IF(TO_CHAR(SYSDATE,'DY')IN('SAT','SUN')) OR 
(TO_CHAR(SYSDATE,'HH24:MI') NOT BETWEEN '08' AND '15')
THEN RAISE_APPLICATION_ERROR(-20500,'You may insert into employees table only during business hours');
END IF;
END;
 
SELECT * FROM MPHASISEMP;

insert into mphasisemp values(105,'SUNIL','sunil@gmail.com',45000,20,5);

-----------------------------
DATE
-----------

SELECT sysdate from dual; 
select last_day(sysdate) from dual;
select to_char(last_day(sysdate),'dd:mm:yy') from dual;


here the data type will be in date format .That is '07-jan-21'

SELECT to_char(sysdate,'Day') from dual; 
SELECT to_char(sysdate,'Month') from dual;
SELECT to_char(sysdate,'year') from dual;
SELECT to_char(sysdate,'yy') from dual;
SELECT to_char(sysdate,'yyyy') from dual;
SELECT to_char(sysdate,'hh:mm:ss') from dual;
SELECT to_char(sysdate,'dd mon yyyy hh:mm:ss') from dual;

-----------------------------------------------------------------------------------------
In 1st program the trigger was applied for a table.we were not able to insert/update/delete a table on a particular day and time.so it is called table level trigger.

In the 2nd program the trigger was applied for a record/ROW.we have 2 references :OLD and :NEW .
THIS IS CALLED RECORD/ROW LEVEL TRIGGER.
---------------------------------------------------------------------------------------------------
CREATE OR REPLACE TRIGGER display_salary_change  
BEFORE INSERT OR UPDATE ON mphasisemp  
FOR EACH ROW  
WHEN (NEW.empID > 0)  
DECLARE  
   sal_diff number;  
BEGIN  
   sal_diff := :NEW.salary  - :OLD.salary;  
   dbms_output.put_line('Old salary: ' || :OLD.salary);  
   dbms_output.put_line('New salary: ' || :NEW.salary);  
   dbms_output.put_line('Salary difference: ' || sal_diff);  
END;

select * from mphasisemp;  
insert into mphasisemp values(115,'sunil','sunil@mphais.com',67000,20,5);
update mphasisemp set salary=42000 where empid=101;
-----------------------------------------------------------------------------------------------------



